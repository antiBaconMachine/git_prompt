# alias to quickly show if any Handbrake processes are running
alias hb='sudo ps -aef | grep HandBrakeCLI'

# alias for quick DNS cache flushing
alias fc='sudo dscacheutil -flushcache'

# enable the git bash completion commands
# source ~/.git-completion

# enable git unstaged indicators - set to a non-empty value
GIT_PS1_SHOWDIRTYSTATE="."

# enable showing of untracked files - set to a non-empty value
GIT_PS1_SHOWUNTRACKEDFILES="."

# enable stash checking - set to a non-empty value
GIT_PS1_SHOWSTASHSTATE="."

# enable showing of HEAD vs its upstream
GIT_PS1_SHOWUPSTREAM="auto"


BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
LIME_YELLOW=$(tput setaf 190)
POWDER_BLUE=$(tput setaf 153)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 7)
BRIGHT=$(tput bold)
NORMAL=$(tput sgr0)
BLINK=$(tput blink)
REVERSE=$(tput smso)
UNDERLINE=$(tput smul)
NORMAL=$(tput sgr0)

# Determine the branch information for this subversion repository.
function set_svn_branch {

  s_prefix="-> "
	
  # Capture the output of the "git svn info" command.
  svn_info="$(git svn info 2> /dev/null | egrep '^URL: ' 2> /dev/null)"
 
  # Get the name of the branch.
  s_branch_pattern="^URL: .*/(branches|tags)/([^/]+)"
  s_trunk_pattern="^URL: .*/trunk(/.*)?$"
  if [[ ${svn_info} =~ $s_branch_pattern ]]; then
    s_branch="${CYAN}${BASH_REMATCH[2]}"
  elif [[ ${svn_info} =~ $s_trunk_pattern ]]; then
    s_branch="${RED}TRUNK"
  else
   s_prefix=''	
   s_branch=''  
  fi
 
  # Set the final branch string.
  SVN_BRANCH="${s_prefix}${s_branch} "
}
PROMPT_COMMAND=set_svn_branch

# set the prompt to show current working directory and git branch name, if it exists

# this prompt is a green username, black @ symbol, cyan host, magenta current working directory and white git branch (only shows if you're in a git branch)
# unstaged and untracked symbols are shown, too (see above)
# this prompt uses the short colour codes defined above

#prompt with username@host
PS1='[$(date +"%d/%m %H:%M")] ${CYAN}\u@\h:${MAGENTA}\w${BRIGHT}${WHITE}`__git_ps1 " (%s)"` ${SVN_BRANCH}${NORMAL}\n\$ '

#prompt with username
#PS1='${CYAN}\u:${MAGENTA}\w${BRIGHT}${WHITE}`__git_ps1 " (%s)"` ${SVN_BRANCH}${NORMAL}\$ '

# this is a cyan username, @ symbol and host, magenta current working directory and white git branch
# it uses the shorter , but visibly more complex, codes for text colours (shorter because the colour code definitions aren't needed)
# PS1='\[\033[0;36m\]\u@\h\[\033[01m\]:\[\033[0;35m\]\w\[\033[00m\]\[\033[1;30m\]\[\033[0;37m\]`__git_ps1 " (%s)"`\[\033[00m\]${SVN_BRANCH}\[\033[0m\]\n\$ '

# return the prompt prefix for the second line
function set_prefix {
    BRANCH=`__git_ps1`
    if [[ -z $BRANCH ]]; then
        echo "${NORMAL}o"
    else
        echo "${UNDERLINE}+"
    fi
}

# and here's one similar to Paul Irish's famous prompt ... not sure if this is the way he does it, but it works  :)
# \033[s = save cursor position
# \033[u = restore cursor position

#PS1='${MAGENTA}\u${WHITE} in ${GREEN}\w${WHITE}${MAGENTA}`__git_ps1 " on %s"`${WHITE}\r\n`set_prefix`${NORMAL}${CYAN}\033[s\033[60C (`date "+%a, %b %d"`)\033[u${WHITE} '
